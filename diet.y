%{
#include <stdio.h>

int yylex();
void yyerror(const char* msg);

%}

%token SIGN INTEGER FLOAT STRING BOOLEAN TYPE IDENTIFIER CHARACTER
%token CONDITIONAL_OP MULTIPLICATION_OP ARITHMETIC_OP
%token LITERAL
%token LPAREN RPAREN LBRACE RBRACE
%token IF ELSIF ELSE WHILE
%token COMMENT COMMENT_BLOCK
%token FUNCTION VOID
%token COMMA SEMICOLON

%start PROGRAM

%%

PROGRAM: STATEMENT
       | PROGRAM STATEMENT
       ;

STATEMENT: DECLARATION
         | ASSIGNMENT
         | IF_STATEMENT
         | WHILE_STATEMENT
         | BLOCK
         | COMMENT
         | FUNCTION
         ;

DECLARATION: VARIABLE EQUALS EXPRESSION SEMICOLON
           ;

ASSIGNMENT: IDENTIFIER EQUALS EXPRESSION SEMICOLON 
          ;

IF_STATEMENT: IF LPAREN CONDITION_SEQUENCE RPAREN BLOCK
            | IF_STATEMENT ELSE_BLOCK
            | IF_STATEMENT ELSIF_BLOCKS
            | IF_STATEMENT ELSIF_BLOCKS ELSE_BLOCK
            ;

ELSE_BLOCK: ELSE LBRACE STATEMENT_LIST RBRACE

ELSIF_BLOCKS: ELSIF_BLOCK
            | ELSIF_BLOCKS ELSIF_BLOCK
            ;

ELSIF_BLOCK: ELSIF LPAREN CONDITION_SEQUENCE RPAREN BLOCK
           ;

WHILE_STATEMENT: WHILE LPAREN CONDITION_SEQUENCE RPAREN BLOCK
               ;

BLOCK: LBRACE STATEMENT_LIST RBRACE
     ;

STATEMENT_LIST: STATEMENT
               | STATEMENT_LIST STATEMENT
               ;

CONDITION: LOGICAL_CONDITION
         | LPAREN CONDITION_SEQUENCE RPAREN
         ;

CONDITION_SEQUENCE: CONDITION
                   | CONDITION_SEQUENCE AND CONDITION
                   | CONDITION_SEQUENCE OR CONDITION
                   ;

LOGICAL_CONDITION: LITERAL CONDITIONAL_OP LITERAL
                 | IDENTIFIER CONDITIONAL_OP IDENTIFIER
                 ;

EXPRESSION: LITERAL
          | EXPRESSION ARITHMETIC_OP EXPRESSION
          ;

LITERAL: INTEGER
       | FLOAT
       | STRING
       | BOOLEAN
       | CHARACTER
       ;

VARIABLE: TYPE IDENTIFIER
        ;

IDENTIFIER: IDENTIFIER
          ;

COMMENT: COMMENT
        | COMMENT_BLOCK
        ;

FUNCTION: FUNCTION RETURN_TYPE IDENTIFIER LPAREN PARAMETER_LIST RPAREN BLOCK
        ;

RETURN_TYPE: TYPE
            | VOID
            ;

PARAMETER_LIST: PARAMETER
              | PARAMETER_LIST COMMA PARAMETER
              ;

PARAMETER: TYPE IDENTIFIER
         ;

%%

int main(void) {
    yyparse();
    return 0;
}

void yyerror(const char* msg) {
    printf("Syntax Error: %s\n", msg);
}
